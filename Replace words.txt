class TrieNode:
    def __init__(self):
        self.is_word = False
        self.children = {}

class Solution:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_word = True

    def search_shortest_root(self, word: str) -> str:
        node = self.root
        current_prefix = ""
        for char in word:
            if char not in node.children:
                return word  # No root found; return the word itself.
            node = node.children[char]
            current_prefix += char
            if node.is_word:
                return current_prefix  # Return the shortest root.
        return word  # No root marks the end of this word.

    def replaceWords(self, dictionary: list[str], sentence: str) -> str:
        for root in dictionary:
            self.insert(root)
        
        words = sentence.split()
        for i in range(len(words)):
            words[i] = self.search_shortest_root(words[i])

        return " ".join(words)